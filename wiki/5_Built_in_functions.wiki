#User Manual - 5 Built-in functions

=5 Built-in functions=

==5.1 How to use to built-ins==

Built-in are special names that invoke useful behavior or side-effects when expanded.
For example the increment built-in, whose name is '{++}', is used to increment a number. 
 
==5.2 The macro argument stack==
 
When a built-in requires one or more arguments, these are taken from the macro argument stack. 
 
The contents of the argument stack can be displayed at any time for diagnostic purposes by invoking the {.s} built-in.

<tt><b> 
{.s}<br/>
=>-------<br/>
=>Items on the stack (0):<br/>
=>-------<br/>
</b></tt>

To push an item, usually a token, onto the stack, append the ampersand character '&' to it:

<tt><b> 
5&<br/>
=><br/>
{.s}<br/>
=>-------<br/>
=>Items on the stack (1):<br/>
`=>stack[0] => [5]`<br/>
=>-------<br/>
</b></tt>

Macro names can be pushed onto the stack:

<tt><b>
```foo```just a test```<br/>
=><br/>
{.s}<br/>
=>-------<br/>
=>Items on the stack (2):<br/>
`=>stack[1] => [foo]`<br/>
`=>stack[0] => [5]`<br/>
=>-------<br/>
</b></tt>

Use the expand `{?}' built-in to pop the top item off and expand it.

<tt><b> 
{?}<br/>
=>this is a test<br/>
{.s}<br/>
=>-------<br/>
=>Items on the stack (1):<br/>
`=>stack[0] => [5]`<br/>
=>-------<br/>
{?}<br/>
=>5<br/>
{.s}<br/>
=>-------<br/>
=>Items on the stack (0):<br/>
=>-------<br/>
</b></tt>
 
==5.3 Stack effect notation==

The following section is a catalog of the minimac's built-ins, included with each built-in's description is a stack effect diagram, in a notation similar to that used by the Forth language, a stack-based language which inspired much of minimac's philosophy and design.
 
The stack effect diagram documents the items that are required to be on the stack before the built-in is invoked, and the after-effect on the stack after the built-in's invocvation.
 
For example, the stack effect for the '{+}' built-in is '( integer integer -- sum )', 
meaning that it expects two (decimal) integers on the stack, which it will remove, and leave their sum in their place.
 
In both the before and after sections of the stack diagram the rightmost item is considered to be at the top of the stack.
 
The stack effect diagram '( -- )' denotes a built-in that has no expectations of the stack nor after-effects on the stack.

==5.4 Catalog of built-ins==

===5.4.1 {?} - expand===

{?} ( token -- )
[unfinished...]

===5.4.2 {+} - plus===

{+} ( integer integer -- sum )
[unfinished...]

===5.4.3 {++} - increment===

{++} ( integer integer -- integer+1) or ( name -- )
[unfinished...]


===5.4.4 {.m} - display macro definitions===

{.m} ( -- )
[unfinished...]

===5.4.5 {.s} - display stack contents===

{.s} ( -- )
[unfinished...]

===5.4.6 {dup} - duplicate===

{dup} ( x -- x x )
{.m} ( -- )
[unfinished...]

===5.4.7 [unfinished - more to come]===