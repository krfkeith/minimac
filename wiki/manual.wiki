#summary User Manual - 1st draft

<font size="5" color="green">minimac - a minimalist macro processor</font><br/>
_Copyright (c) 2009 Mark W. Humphries. All rights reserved._

<wiki:toc max_depth="1" />

=1 Introduction=

==1.1 Synopsis==

Thanks for you interest in minimac.

Minimac is a minimalist macro processor that is intended as a front end preprocessor for little language compilers.

==1.2 Current Status==
This project was started in April 2009. The software is currently in pre-alpha status,
and is being developed in my spare time concurrently with the writing of this manual

This Wiki will serve as an initial draft of an eventual users manual.
 
All feedback is very welcome.

==1.3 Notation==

In this manual all output from minimac is prefixed with '*=>*'.

==1.3 Alternatives to minimac==
 
If minimac is not suited to your needs, the following open source macro-processors are possible alternatives:
  * m4
  * gpp
  * ...[unfinished]

=2 Invoking minimac=

 The minimac executable is named 'mm'.
 Minimac reads from standard input and writes the processed text to standard output, error messages are written to standard error
 Minimac currently does not recognize any command-line switches or options.

 Minimac exits 0 on success, and 1 if an error occurs.

=3 Defining macros=

==3.1 Defining a basic substitution macro==

A macro definition is composed of a name and a body. 
A macro definition begins with the backquote character ` (upper left key on most keyboards) followed by the macro name. A second backquote begins the body of the definition, and a third backquote ends the definition.
 
The following example defines the macro 'foo' that expands to `Hello world!'

<tt><b>
```foo```Hello World!```<br/>
=><br/>
foo<br/>
=>Hello World!<br/>
</b></tt>

Any text between the first space after end of the name and the body of the definition is ignored. The following three examples are equivalent:

<tt><b>
```foo```Hello World!```<br/>
```foo ```Hello World!```<br/>
```foo This is an example ```Hello World!```<br/>
</b></tt>

Macro names are case sensitive:

<tt><b>
```foo```Hello```<br/>
=><br/>
FOO<br/>
=>FOO<br/>
foo<br/>
=>Hello<br/>
</b></tt>

==3.2 Redefining a macro==

A new definition of a macro replaces the previous definition from that point onwards.

<tt><b>
```foo```Hello```<br/>
=><br/>
foo<br/>
=>Hello<br/>
```foo```Goodbye```<br/>
=><br/>
foo<br/>
=>Goodbye<br/>
</b></tt>

==3.3 Nested macros==

Macro expansion is delayed to the last possible moment.

<tt><b>
```friend```George```<br/>
=><br/>
```greet```Hello friend```<br/>
=><br/>
greet<br/>
=>Hello George<br/>
```friend```Ann```<br/>
=><br/>
greet<br/>
=>Hello Ann<br/>
</b></tt>

==3.4 Self-referential macros==

The caret '^' character in the body of a macro expands to the previous definition with the same name as the macro currently being defined.

<tt><b>
```greet```hello```<br/>
=><br/>
greet<br/>
=>hello<br/>
```greet```Well ^ there!```<br/>
=><br/>
greet<br/>
=> Well hello there!<br/>
</b></tt>

==3.5 Embedded macro names==

To expand a macro name that is adjacent to a non-whitespace character, place a dollar '$' character between the name and the non-whitespace character:

<tt><b>
```what```car```<br/>
=><br/>
```who```George```<br/>
=><br/>
```thing```who$'s what```<br/>
=><br/>
thing<br/>
=>George's car<br/>
</b></tt>

=4 Escaping=

==4.1 The escape character==

The backslash '\' character is used as an escape character, i.e. the character immediately following the backslash is interpreted literally.

<tt><b>
```test```bcd```<br/>
=><br/>
```embedded```a$test$e```<br/>
=><br/>
embedded<br/>
=>abcde<br/>
```escaped```a\$test\$e```<br/>
=><br/>
escaped<br/>
=>a$test$e<br/>
</b></tt>

=5 Built-in functions=

==5.1 How to use to built-ins==

Built-in are special names that invoke useful behavior or side-effects when expanded.
For example the increment built-in, whose name is '{++}', is used to increment a number. 
 
==5.2 The macro argument stack==
 
When a built-in requires one or more arguments, these are taken from the macro argument stack. 
 
The contents of the argument stack can be displayed at any time for diagnostic purposes by invoking the {.s} built-in.

<tt><b> 
{.s}<br/>
=>-------<br/>
=>Items on the stack (0):<br/>
=>-------<br/>
</b></tt>

To push an item, usually a token, onto the stack, append the ampersand character '&' to it:

<tt><b> 
5&<br/>
=><br/>
{.s}<br/>
=>-------<br/>
=>Items on the stack (1):<br/>
`=>stack[0] => [5]`<br/>
=>-------<br/>
</b></tt>

Macro names can be pushed onto the stack:

<tt><b>
```foo```just a test```<br/>
=><br/>
{.s}<br/>
=>-------<br/>
=>Items on the stack (2):<br/>
`=>stack[1] => [foo]`<br/>
`=>stack[0] => [5]`<br/>
=>-------<br/>
</b></tt>

Use the expand `{?}' built-in to pop the top item off and expand it.

<tt><b> 
{?}<br/>
=>this is a test<br/>
{.s}<br/>
=>-------<br/>
=>Items on the stack (1):<br/>
`=>stack[0] => [5]`<br/>
=>-------<br/>
{?}<br/>
=>5<br/>
{.s}<br/>
=>-------<br/>
=>Items on the stack (0):<br/>
=>-------<br/>
</b></tt>
 
==5.3 Stack effect notation==

The following section is a catalog of the minimac's built-ins, included with each built-in's description is a stack effect diagram, in a notation similar to that used by the Forth language, a stack-based language which inspired much of minimac's philosophy and design.
 
The stack effect diagram documents the items that are required to be on the stack before the built-in is invoked, and the after-effect on the stack after the built-in's invocvation.
 
For example, the stack effect for the '{+}' built-in is '( integer integer -- sum )', 
meaning that it expects two (decimal) integers on the stack, which it will remove, and leave their sum in their place.
 
In both the before and after sections of the stack diagram the rightmost item is considered to be at the top of the stack.
 
The stack effect diagram '( -- )' denotes a built-in that has no expectations of the stack nor after-effects on the stack.

==5.4 Catalog of built-ins==

===5.4.1 {?} - expand===

{?} ( token -- )
unfinished...

===5.4.2 {+} - plus===

{+} ( integer integer -- sum )
unfinished...

===5.4.3 {++} - increment===

{++} ( integer integer -- integer+1) or ( name -- )
unfinished...


===5.4.4 {.m} - display macro definitions===

{.m} ( -- )
unfinished...

===5.4.5 {.s} - display stack contents===

{.s} ( -- )
unfinished...

===5.4.6 {dup} - duplicate===

{dup} ( x -- x x )
{.m} ( -- )
unfinished...

===5.4.7 [unfinished - more to come]===

=6.0 Macros with arguments=

unfinished...

=7 Quirks and limitations=

unfinished...

=Appendix A - <b>minimac</b> Quick Reference=

==Special characters:==

||`||define||
||$||embed||
||\||escape||
||&||push||
||^||self-reference||

==Buit-ins:==

||<b>name</b>||<b>action</b>||<b>stack effect</b>||
||{?}||expand||( token -- )||
||{+}||plus||( integer integer -- sum )||
||{++}||increment||( integer integer -- integer+1) or ( name -- )||
||{.m}||list macros||( -- )||
||{.s}||display stack||( -- )||
||{dup}||duplicate||( x -- x x )||

<br/>   
...unfinished - more to come

=Appendix B - BSD Documentation License=

Redistribution and use in source (text) and 'compiled' forms (SGML, HTML, PDF, PostScript, RTF and so forth) with or without modification, are permitted provided that the following conditions are met:

  # Redistributions of source code (text) must retain the above copyright notice, this list of conditions and the following disclaimer as the first lines of this file unmodified.
  # Redistributions in compiled form (transformed to other DTDs, converted to PDF, PostScript, RTF and other formats) must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

THIS DOCUMENTATION IS PROVIDED BY THE COPYRIGHT HOLDER "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS DOCUMENTATION, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This notice shall appear on any product containing this material.

----
*minimac - a minimalist macro processor*

_Copyright (c) 2009 Mark W. Humphries. All rights reserved._
